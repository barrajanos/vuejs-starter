{"remainingRequest":"/Users/admin/Documents/GitHub/empyr/vuejs-starter/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/admin/Documents/GitHub/empyr/vuejs-starter/src/views/Landing.vue?vue&type=template&id=a8baa566&","dependencies":[{"path":"/Users/admin/Documents/GitHub/empyr/vuejs-starter/src/views/Landing.vue","mtime":1603187173750},{"path":"/Users/admin/Documents/GitHub/empyr/vuejs-starter/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Documents/GitHub/empyr/vuejs-starter/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/admin/Documents/GitHub/empyr/vuejs-starter/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/admin/Documents/GitHub/empyr/vuejs-starter/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CjxkaXY+CiAgPHNlY3Rpb24gY2xhc3M9Imhlcm8gaXMtcHJpbWFyeSBpcy1tZWRpdW0gZW1weXItaGVybyI+CjxkaXYgY2xhc3M9Imhlcm8taGVhZGVyIG5hdmlnYXRpb24taGVhZGVyIj4KICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICAgIDxuYXYgY2xhc3M9ImxldmVsIj4KICAgICAgICAgIDxkaXYgY2xhc3M9ImxldmVsLWxlZnQiPgogICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxldmVsLWl0ZW0iPgogICAgICAgICAgICAgICAgICA8YSBocmVmPSIjIj4KICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSIuLi9hc3NldHMvaW1nL2VtcHlybG9nby5zdmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJFbXB5ciIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsZXZlbC1pdGVtIj4KICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJsb2dvZGVzYyI+PHByaXNtaWMtcmljaC10ZXh0IDpmaWVsZD0iZmllbGRzLmxvZ29fZGVzYyIvPjwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibGV2ZWwtaXRlbSI+CiAgICAgICAgICA8Yi1kcm9wZG93biBjbGFzcz0ibGFuZ3VhZ2Utc2VsZWN0b3IiIHYtbW9kZWw9ImlzUHVibGljIiBhcmlhLXJvbGU9Imxpc3QiPgogICAgICAgICAgICAgIDxidXR0b24gY2xhc3M9ImJ1dHRvbiBpcy1wcmltYXJ5IiB0eXBlPSJidXR0b24iIHNsb3Q9InRyaWdnZXIiPgogICAgICAgICAgICAgICAgICA8dGVtcGxhdGU+CiAgICAgICAgICAgICAgICAgICAgICA8Yi1pY29uIGljb249ImVhcnRoIj48L2ItaWNvbj4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPkVOPC9zcGFuPgogICAgICAgICAgICAgICAgICA8L3RlbXBsYXRlPgogICAgICAgICAgICAgICAgICA8Yi1pY29uIGljb249Im1lbnUtZG93biI+PC9iLWljb24+CiAgICAgICAgICAgICAgPC9idXR0b24+CgogICAgICAgICAgICAgIDxiLWRyb3Bkb3duLWl0ZW0gOnZhbHVlPSJ0cnVlIiBhcmlhLXJvbGU9Imxpc3RpdGVtIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVkaWEiPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVkaWEtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPlJPIC0gUm9tw6FuPC9oMz4KICAgICAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICA8L2ItZHJvcGRvd24taXRlbT4KCiAgICAgICAgICAgICAgPGItZHJvcGRvd24taXRlbSA6dmFsdWU9ImZhbHNlIiBhcmlhLXJvbGU9Imxpc3RpdGVtIj4KICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVkaWEiPgogICAgICAgICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVkaWEtY29udGVudCI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGgzPlNLIC0gU3psb3bDoWs8L2gzPgogICAgICAgICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgIDwvYi1kcm9wZG93bi1pdGVtPgogICAgICAgICAgPC9iLWRyb3Bkb3duPgogICAgICAgICAgPC9kaXY+CiAgICAgICAgPC9kaXY+CiAgICAgIDwvbmF2PgogICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8ZGl2IGNsYXNzPSJoZXJvLWJvZHkiPgogICAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgICAgCiAgICAgIDxkaXYgY2xhc3M9ImxldmVscyBjb2x1bW5zIGlzLXZjZW50ZXJlZCI+CiAgICAgICAgPGRpdiBjbGFzcz0iY29sdW1uIGlzLW9uZS10aGlyZCB0aXRsZSI+CiAgICAgICAgICAgIDxoMSBjbGFzcz0idGl0bGUgaXMtc2l6ZS0yIj4KICAgICAgICAgICAgICA8cD48cHJpc21pYy1yaWNoLXRleHQgOmZpZWxkPSJmaWVsZHMuaGVhZGVyX3RpdGxlIi8+PC9wPgogICAgICAgICAgICA8L2gxPgogICAgICAgICAgICAgIDxiLWJ1dHRvbiB0eXBlPSJpcy1kYXJrIiBzaXplPSJpcy1tZWRpdW0iIGljb24tbGVmdD0iYXJyb3ctZG93biIgY2xhc3M9Im1haW4tYnV0dG9uIiB2LXNjcm9sbC10bz0iJyNrby1zY3JvbGwnIj48cHJpc21pYy1yaWNoLXRleHQgOmZpZWxkPSJmaWVsZHMuaGVhZGVyX2J1dHRvbl90ZXh0Ii8+PC9iLWJ1dHRvbj4KICAgICAgICA8L2Rpdj4KICAgICAgICA8ZGl2IGNsYXNzPSJjb2x1bW4gaXMtdGhyZWUtZmlmdGhzIGlzLWhpZGRlbi1tb2JpbGUiPgogICAgICAgICAgICA8ZmlndXJlIGNsYXNzPSJpbWFnZSBoZWFkZXItaW1hZ2UiPgogICAgICAgICAgICAgIDxpbWcgc3JjPSIuLi9hc3NldHMvaW1nL2hlYWRlcmltYWdlLnBuZyI+CiAgICAgICAgICAgIDwvZmlndXJlPgogICAgICAgIDwvZGl2PgogICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2Pgo8L3NlY3Rpb24+CjxzZWN0aW9uIGNsYXNzPSJrbyBpcy1jZW50ZXJlZCIgaWQ9ImtvLXNjcm9sbCI+CjxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgPGRpdiBjbGFzcz0iY29sdW1ucyBpcy1jZW50ZXJlZCI+CiAgICA8ZGl2IGNsYXNzPSJjb2x1bW4gaXMtaGFsZiI+CiAgICAgICAgPGgzIGNsYXNzPSJoYXMtdGV4dC1jZW50ZXJlZCBpcy1zaXplLTQiPjxwcmlzbWljLXJpY2gtdGV4dCA6ZmllbGQ9ImZpZWxkcy5rb19oZWFkZXJfdGl0bGUiLz4KICAgICAgPC9oMz4KICA8L2Rpdj4KPC9kaXY+CjxkaXYgY2xhc3M9ImNvbHVtbnMgaXMtY2VudGVyZWQiPgo8ZGl2IGNsYXNzPSJrby1jYXJkIGNvbHVtbiI+CiAgPGRpdiBjbGFzcz0ia28taXRlbXMiPgogICAgPGRpdiBjbGFzcz0ibGV2ZWwga29pdGVtIGlzLXZjZW50ZXJlZCI+CiAgICAgIDxkaXYgY2xhc3M9ImxlbHZlbC1sZWZ0Ij4KICAgICAgICA8cCBjbGFzcz0ia28tdGV4dCBpcy1zaXplLTQiPkkgZGVjbGFyZSBteXNlbGYgUm9tYS48L3A+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJsZXZlbC1yaWdodCI+CiAgICAgICAgICA8Yi1maWVsZD4KICAgICAgICAgICAgICA8Yi1yYWRpby1idXR0b24gdi1tb2RlbD0icmFkaW9Sb21hIgogICAgICAgICAgICAgICAgICBuYXRpdmUtdmFsdWU9InllcyIKICAgICAgICAgICAgICAgICAgdHlwZT0iaXMtc3VjY2VzcyIKICAgICAgICAgICAgICAgICAgc2l6ZT0iaXMtbGFyZ2UiPgogICAgICAgICAgICAgICAgICA8c3Bhbj5ZZXM8L3NwYW4+CiAgICAgICAgICAgICAgPC9iLXJhZGlvLWJ1dHRvbj4KICAgICAgICAgICAgICA8Yi1yYWRpby1idXR0b24gdi1tb2RlbD0icmFkaW9Sb21hIgogICAgICAgICAgICAgICAgICBuYXRpdmUtdmFsdWU9Im5vIgogICAgICAgICAgICAgICAgICB0eXBlPSJpcy1kYW5nZXIiCiAgICAgICAgICAgICAgICAgIHNpemU9ImlzLWxhcmdlIj4KICAgICAgICAgICAgICAgICAgPHNwYW4+Tm88L3NwYW4+CiAgICAgICAgICAgICAgPC9iLXJhZGlvLWJ1dHRvbj4KICAgICAgICAgIDwvYi1maWVsZD4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJlcnJvci1tZXNzYWdlIG1iLTQiICB2LXNob3c9InJhZGlvUm9tYSA9PT0gJ25vJyI+CiAgICAgIDxkaXY+PHN0cm9uZz5VbmZvcnR1bmF0ZWx5LCB5b3UgZG9uJ3QgbWVldCB0aGUgcmVxdWlyZW1lbnRzLjwvc3Ryb25nPjwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJtdC0yIj48YSBocmVmPSJodHRwczovL3d3dy5yb21hZWR1Y2F0aW9uZnVuZC5vcmcvIiB0YXJnZXQ9Il9ibGFuayI+TGVhcm4gbW9yZSBhYm91dCBvdXIgd29yazwvYT48L2Rpdj4KICAgICAgPC9kaXY+CgogICAgICAgIDxkaXYgY2xhc3M9ImxldmVsIGtvaXRlbSBpcy12Y2VudGVyZWQiPgogICAgICA8ZGl2IGNsYXNzPSJsZWx2ZWwtbGVmdCI+CiAgICAgICAgPHAgY2xhc3M9ImtvLXRleHQiPjxzcGFuIGNsYXNzPSJpcy1zaXplLTQiPkkgbGl2ZSBpbjo8L3NwYW4+CiAgICAgICAgICAgICAgICA8dWwgY2xhc3M9ImlzLXNpemUtNSI+CiAgICAgICAgICA8bGk+LSBCdWRhcGVzdDwvbGk+CiAgICAgICAgICA8bGk+LSBQZXN0IGNvdW50eTwvbGk+CiAgICAgICAgICA8bGk+LSBCb3Jzb2QtQWJhw7pqLVplbXBsw6luIGNvdW50eTwvbGk+CiAgICAgICAgICA8bGk+LSBCYXJhbnlhIGNvdW50eTwvbGk+CiAgICAgICAgICA8bGk+LSBTemFib2xjcy1TemF0bcOhci1CZXJlZyBjb3VudHk8L2xpPgogICAgICAgICAgICAgICAgPC91bD48L3A+CiAgICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJsZXZlbC1yaWdodCI+CiAgICAgICAgICA8Yi1maWVsZD4KICAgICAgICAgICAgICA8Yi1yYWRpby1idXR0b24gdi1tb2RlbD0icmFkaW9MaXZlIgogICAgICAgICAgICAgICAgICBuYXRpdmUtdmFsdWU9InllcyIKICAgICAgICAgICAgICAgICAgdHlwZT0iaXMtc3VjY2VzcyIKICAgICAgICAgICAgICAgICAgc2l6ZT0iaXMtbGFyZ2UiPgogICAgICAgICAgICAgICAgICA8c3Bhbj5ZZXM8L3NwYW4+CiAgICAgICAgICAgICAgPC9iLXJhZGlvLWJ1dHRvbj4KICAgICAgICAgICAgICA8Yi1yYWRpby1idXR0b24gdi1tb2RlbD0icmFkaW9MaXZlIgogICAgICAgICAgICAgICAgICBuYXRpdmUtdmFsdWU9Im5vIgogICAgICAgICAgICAgICAgICB0eXBlPSJpcy1kYW5nZXIiCiAgICAgICAgICAgICAgICAgIHNpemU9ImlzLWxhcmdlIgogICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgIDxzcGFuPk5vPC9zcGFuPgogICAgICAgICAgICAgIDwvYi1yYWRpby1idXR0b24+CiAgICAgICAgICA8L2ItZmllbGQ+CiAgICAgIDwvZGl2PgogICAgPC9kaXY+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJlcnJvci1tZXNzYWdlIiB2LXNob3c9InJhZGlvTGl2ZSA9PT0gJ25vJyI+CiAgICAgIDxkaXY+PHN0cm9uZz5VbmZvcnR1bmF0ZWx5LCB5b3UgZG9uJ3QgbWVldCB0aGUgcmVxdWlyZW1lbnRzLjwvc3Ryb25nPjwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJtdC0xIj5JbiBjYXNlIHlvdSB3b3VsZCBsaWtlIHVzIHRvIGxldCB5b3Uga25vdyB3aGVuIG91ciBwcm9ncmFtIGJlY29tZXMgYXZhaWxhYmxlIGluIHlvdXIgY291bnR5LCA8YSBAY2xpY2s9InByb21wdE51bWJlciI+dGVsbCB1cyB5b3VyIGVtYWlsIGFkZHJlc3MuPC9hPjwvZGl2PgogICAgICA8L2Rpdj4KICA8L2Rpdj4KICAgIDxocj4KICAgIDxkaXYgY2xhc3M9ImNvbHVtbnMgaXMtY2VudGVyZWQgaGFzLXRleHQtY2VudGVyZWQiPgogICAgICA8ZGl2IGNsYXNzPSJjb2x1bW4iPgogICAgICAgIDxkaXYgY2xhc3M9Imdvb2QiIHYtaWY9InJhZGlvTGl2ZSA9PT0gJ3llcycgJiByYWRpb1JvbWEgPT09ICd5ZXMnICI+CiAgICAgICAgICAgICAgICAgICAgPGItYnV0dG9uIHR5cGU9ImlzLXByaW1hcnkiIHNpemU9ImlzLWxhcmdlIiBjbGFzcz0icmVkIGJ1dHRvbi1yYWRpdXMgbXQtMTAiPkxldOKAmXMgZ2V0IHN0YXJ0ZWQ8L2ItYnV0dG9uPgogICAgICAgIDwvZGl2PgogICAgICAgPGRpdiBjbGFzcz0ibm90Z29vZCIgdi1lbHNlPgogICAgICAgICAgICAgICAgICAgIDxiLWJ1dHRvbiB0eXBlPSJpcy1wcmltYXJ5IiBzaXplPSJpcy1sYXJnZSIgY2xhc3M9InJlZCBidXR0b24tcmFkaXVzIG10LTEwIiBkaXNhYmxlZD5MZXTigJlzIGdldCBzdGFydGVkPC9iLWJ1dHRvbj4KICAgICAgICA8L2Rpdj4KCgogICAgICAgICAgICAgIDxwIGNsYXNzPSJtdC0zIj48Yi1pY29uIGljb249ImNsb2NrLXRpbWUtb25lLW91dGxpbmUiIHNpemU9ImlzLXNtYWxsIj48L2ItaWNvbj4gSXQgdGFrZXMgb25seSA8c3Ryb25nPjUgbWludXRlczwvc3Ryb25nPjwvcD4KICAgICAgICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2Pgo8L2Rpdj4KPC9kaXY+Cjwvc2VjdGlvbj4KPHNlY3Rpb24gY2xhc3M9IndoYXRpcyI+CiAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KICAgIDxkaXYgY2xhc3M9ImNvbHVtbnMgaXMtdmNlbnRlcmVkIj4KICAgICAgPGRpdiBjbGFzcz0iY29sdW1uIGlzLXR3by1maWZ0aHMiPgogICAgICAgICAgICA8ZmlndXJlIGNsYXNzPSJpbWFnZSBjb250YWN0LWltYWdlIG1iLTQiPgogICAgICAgICAgICAgIDxpbWcgc3JjPSIuLi9hc3NldHMvaW1nL2Nvb3JkaW5hdG9yLnBuZyI+CiAgICAgICAgICAgIDwvZmlndXJlPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJjb250YWN0Ij4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJuYW1lIj5NZWxpbmRhIFZhamRhPC9kaXY+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGl0bGUiPk91ciBlbXBsb3ltZW50IGNvb3JkaW5hdG9yIGluIEh1bmdhcnk8L2Rpdj4KICAgICAgICAgICAgICA8YSBocmVmPSJtYWlsdG86bXZhamRhQHJvbWFlZHVjYXRpb25mdW5kLm9yZyIgc3ViamVjdD0iRW1weXIgLSBJbmZvcm1hdGlvbiIgY2xhc3M9ImVtYWlsIj5tdmFqZGFAcm9tYWVkdWNhdGlvbmZ1bmQub3JnPC9hPgogICAgICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImNvbHVtbiBpcy1vbmUtdGhpcmQiPgogICAgICAgICAgICA8aDEgY2xhc3M9ImlzLXNpemUtMyBoYXMtdGV4dC13ZWlnaHQtYm9sZCI+V2hhdCBpcyBFTVBZUj88L2gxPgogICAgICAgICAgICA8ZGl2IGNsYXNzPSJtdC0zIj5FTVBZUiBpcyBwYXJ0IG9mIFJvbWEgRWR1Y2F0aW9uIEZ1bmTigJlzIFNIQVBZUiBwcm9ncmFtLiBCZXNpZGVzIG90aGVyIGFjdGl2aXRpZXMgd2Ugc3VwcG9ydCB5b3VuZyBhZHVsdHMgaW4gdGhlaXIgcHJlcGFyYXRpb25zIGZvciBlbXBsb3ltZW50LiBUaGUgbmFtZSBpdHNlbGYgaXMgYW4gYWNyb255bTogRU1QIHJlZmVycyB0byBlbXBsb3ltZW50IHdoaWxlIFlSIHN0YW5kcyBmb3IgeW91bmcgUm9tYS4gVGhlIHByb2plY3QgaXMgc3VwcG9ydGVkIGJ5IHRoZSBWZWx1eCBGb3VuZGF0aW9ucy4gT3VyIHNlcnZpY2VzIGFyZSBjb21wbGV0ZWx5IGZyZWUgZm9yIHlvdS48L2Rpdj4KICAgICAgICAgICAgPGRpdiBjbGFzcz0ibXQtNSI+PHN0cm9uZz5JZiB5b3UgYXJlIGludGVyZXN0ZWQsIDxhIGhyZWY9IiIgdi1zY3JvbGwtdG89Iicja28tc2Nyb2xsJyI+IHJlZ2lzdGVyPC9hPiBhbmQgb3VyIGNvbGxlYWd1ZSB3aWxsIHJlYWNoIG91dCB0byB5b3Ugc29vbi48L3N0cm9uZz48L2Rpdj4KICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9zZWN0aW9uPgo8c2VjdGlvbiBjbGFzcz0ic2VydmljZXMiPgogIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICA8aDEgY2xhc3M9ImlzLXNpemUtMyBoYXMtdGV4dC13ZWlnaHQtYm9sZCBoYXMtdGV4dC1jZW50ZXJlZAltYi02Ij5TZXJ2aWNlcyB3ZSBwcm92aWRlPC9oMT4KICAgICAgPGRpdiBjbGFzcz0iY29sdW1ucyBpcy1vZmZzZXQtb25lLWZpZnRoIGlzLWNlbnRlcmVkIG10LTYiPgogICAgICA8ZGl2IGNsYXNzPSJjb2x1bW4gaXMtb25lLXRoaXJkIj4KICAgICAgPGgyPkZvciBlbXBsb3ltZW50PC9oMj4KICAgICAgPC9kaXY+CiAgICAgIDxkaXYgY2xhc3M9ImNvbHVtbiBpcy1oYWxmIj4KPGRpdiBjbGFzcz0ic2VydmljZS1pdGVtIG1iLTYiPgogIDxkaXYgY2xhc3M9InNlcnZpY2UtbmFtZSBtYi0yIj4KICAgIDxpbWcgY2xhc3M9IiIgc3JjPSIuLi9hc3NldHMvaW1nL3NlbGYtZW1wbG95bWVudC5zdmciIGFsdD0iU2VsZiBlbXBsb3ltZW50Ij4KPHNwYW4gY2xhc3M9IiIgPlNlbGYtZW1wbG95bWVudDwvc3Bhbj4KICA8L2Rpdj4KICA8ZGl2IGNsYXNzPSJzZXJ2aWNlLWRlc2MgbXQtNCI+CkhhdmluZyBhIGdyZWF0IGlkZWEgYW5kIGFuIGVudGVycHJlbnVlcmlhbCBtaW5kc2V0IGlzIGEgZ3JlYXQgY29tYmluYXRpb24gdG8gc3RhcnQgeW91ciBvd24gYnVzaW5lc3MuIFRoZXJlIGFyZSBzdGF0ZSBtZWFzdXJlcyBhdmFpbGJsZSBmb3Igc3RhcnQgdXBzLCBpbiBhZGRpdGlvbiB3ZSBjYW4gc3VwcG9ydCB5b3Ugd2l0aCB0cmFpbmluZ3MgYW5kIGNvdWNoaW5nLgogIDwvZGl2Pgo8L2Rpdj4KCjxkaXYgY2xhc3M9InNlcnZpY2UtaXRlbSBtYi01Ij4KICA8ZGl2IGNsYXNzPSJzZXJ2aWNlLW5hbWUgbWItMiI+CiAgICA8aW1nIGNsYXNzPSIiIHNyYz0iLi4vYXNzZXRzL2ltZy9jb250YWN0LXRvLWVtcGxveWVycy5zdmciIGFsdD0iQ29udGFjdCB0byBlbXBsb3llcnMiPgo8c3BhbiBjbGFzcz0iIiA+Q29udGFjdCB0byBlbXBsb3llcnM8L3NwYW4+CiAgPC9kaXY+CiAgPGRpdiBjbGFzcz0ic2VydmljZS1kZXNjIG1iLTYiPgpJdCBjYW4gaGFwcGVuIHRoYXQgdGhlIGRlbWFuZCBhbmQgc3VwcGx5IGRvbuKAmXQgbWVldC4gV2UgY2FuIGhlbHAgeW91IGNvbm5lY3Qgd2l0aCB0aGUgbW9zdCBpbXBvcnRhbnQgZW1wbG95ZXJzIGJhc2VkIG9uIHlvdXIgcXVhaWxpZmljYXRpb24uCiAgPC9kaXY+CjwvZGl2PgoKPGRpdiBjbGFzcz0ic2VydmljZS1pdGVtIG1iLTUiPgogIDxkaXYgY2xhc3M9InNlcnZpY2UtbmFtZSBtYi0yIj4KICAgIDxpbWcgY2xhc3M9IiIgc3JjPSIuLi9hc3NldHMvaW1nL3NvZnQtc2tpbGwuc3ZnIiBhbHQ9IlNvZnQtc2tpbGxzIHRyYW5pbmciPgo8c3BhbiBjbGFzcz0iIiA+U29mdC1za2lsbHMgdHJhbmluZzwvc3Bhbj4KICA8L2Rpdj4KICA8ZGl2IGNsYXNzPSJzZXJ2aWNlLWRlc2MgbWItNiI+CkhhdmluZyB0aGUgcmlnaHQgcXVhbGlmaWNhdGlvbiBpcyBhIGdvb2Qgc3RhcnQsIGJ1dCB3aGVuIGl0IGNvbWVzIHRvIGVtcGxveW1lbnQgeW91IG5lZWQgYSBzZXQgb2Ygc2tpbGxzIHRvIHByb3ZlIHRoYXQgeW91IGFyZSB0aGUgcmlnaHQgY2FuZGlkYXRlLiBXaXRoIG91ciB0cmFpbmluZ3MgYW5kIHdvcmtzaG9wIHdlIGNhbiBoZWxwIHlvdSB3aXRoIENWIHdyaXRpbmcsIGpvYiBpbnRlcnZpZXdzLCBhbmQgb3RoZXIgc29mdCBza2lsbHMgeW91IHdhbnQgdG8gZGV2ZWxvcC48L2Rpdj4KPC9kaXY+Cgo8ZGl2IGNsYXNzPSJzZXJ2aWNlLWl0ZW0gbWItNSI+CiAgPGRpdiBjbGFzcz0ic2VydmljZS1uYW1lIG1iLTIiPgogICAgPGltZyBjbGFzcz0iIiBzcmM9Ii4uL2Fzc2V0cy9pbWcvc3VwcG9ydGluam9ic2VhcmNoLnN2ZyIgYWx0PSJTdXBwb3J0IGluIGpvYiBzZWFyY2giPgo8c3BhbiBjbGFzcz0iIiA+U3VwcG9ydCBpbiBqb2Igc2VhcmNoPC9zcGFuPgogIDwvZGl2PgogIDxkaXYgY2xhc3M9InNlcnZpY2UtZGVzYyBtYi02Ij4KQXJlIHlvdSBmYW1pbGlhciB3aXRoIHRoZSBtb3N0IHBvcHVsYXIgc2VhcmNoIGVuZ2luZXMgaW4gSHVuZ2FyeT8gV2hhdCBvdGhlciB0b29scyBjYW4geW91IHVzZSB0byBmaW5kIHRoZSByaWdodCB3b3JrcGxhY2U/IFlvdSBjYW4gY291bnQgb24gdXMgdG8gaGVscCB5b3UgbmF2aWdhdGUgaW4gdGhlIGFyZSBvZiBqb2Igc2VhcmNoLjwvZGl2Pgo8L2Rpdj4KCjwvZGl2Pgo8L2Rpdj4KCjxociBjbGFzcz0ibWItNSI+Cgo8ZGl2IGNsYXNzPSJjb2x1bW5zIGlzLW9mZnNldC1vbmUtZmlmdGggaXMtY2VudGVyZWQgbXQtNiI+CiAgICAgIDxkaXYgY2xhc3M9ImNvbHVtbiBpcy1vbmUtdGhpcmQiPgogIDxoMj5UbyBzdXBwb3J0IHN0dWRpZXMgYW5kIGVtcGxveW1lbnQ8L2gyPgogICAgIDwvZGl2PgogICAgICA8ZGl2IGNsYXNzPSJjb2x1bW4gaXMtaGFsZiI+CjxkaXYgY2xhc3M9InNlcnZpY2UtaXRlbSBtYi02Ij4KICA8ZGl2IGNsYXNzPSJzZXJ2aWNlLW5hbWUgbWItMiI+CiAgICA8aW1nIGNsYXNzPSIiIHNyYz0iLi4vYXNzZXRzL2ltZy9zZWNvbmQtY2hhbmNlLnN2ZyIgYWx0PSJTZWNvbmQtY2hhbmNlIHByb2dyYW1zIj4KPHNwYW4gY2xhc3M9IiIgPlNlY29uZC1jaGFuY2UgcHJvZ3JhbXM8L3NwYW4+CiAgPC9kaXY+CiAgPGRpdiBjbGFzcz0ic2VydmljZS1kZXNjIG10LTQiPgpDb21wbGV0aW5nIHByaW1hcnkgYW5kIHNlY29uZGFyeSBzY2hvb2wgYXJlIHRoZSBiYXNpcyBvZiBmdXJ0aGVyIHN0dWRpZXMgbGVhZGluZyB0byBzdWNjZXNzZnVsIGVtcGxveW1lbnQuIENvbXBsZXRpbmcgZm9ybWVybHkgaW50ZXJtaXR0ZWQgc3R1ZGllcyBjYW4gZ28gaGFuZCBpbiBoYW5kIHdpdGggZ2FpbmluZyBhIHZvY2F0aW9uYWwgcXVhbGlmaWNhdGlvbiBvciB0aGUgbWF0dXJhLiBUcmFpbmluZ3MgdXN1YWxseSBsYXN0IGZvciAyIHRvIDQgeWVhcnMuCiAgPC9kaXY+CjwvZGl2PgoKPGRpdiBjbGFzcz0ic2VydmljZS1pdGVtIG1iLTUiPgogIDxkaXYgY2xhc3M9InNlcnZpY2UtbmFtZSBtYi0yIj4KICAgIDxpbWcgY2xhc3M9IiIgc3JjPSIuLi9hc3NldHMvaW1nL3ZvY2F0aW9uYWwtdHJhbmluZy5zdmciIGFsdD0iVm9jYXRpb25hbCB0cmFpbmluZyI+CjxzcGFuIGNsYXNzPSIiID5Wb2NhdGlvbmFsIHRyYWluaW5nPC9zcGFuPgogIDwvZGl2PgogIDxkaXYgY2xhc3M9InNlcnZpY2UtZGVzYyBtYi02Ij4KVm9jYXRpb25hbCB0cmFpbmluZ3MsIHNob3J0LSwgYW5kIGxvbmctdGVybSwgYXJlIG9yZ2FuaXplZCBieSBwdWJsaWMgYW5kIHByaXZhdGUgc2Nob29scyBhbmQgdXN1YWxseSBlbmQgd2l0aCBhIHN0YXRlLXJlY29nbml6ZWQgdm9jYXRpb25hbCBxdWFsaWZpY2F0aW9uIChPS0ogaW4gSHVuZ2FyeSkuIFRoZXJlIGlzIGEgd2lkZSByYW5nZSBvZiBwcm9mZXNzaW9ucyB0aGF0IGNhbiBiZSBzdHVkaWVkLCBmcm9tIGhhaXJkcmVzc2VyIHRvIGhlYWx0aCBpbnN1cmFuY2UgYWdlbnQsIG9yIGNhciBtZWNoYW5pYy48L2Rpdj4KPC9kaXY+Cgo8ZGl2IGNsYXNzPSJzZXJ2aWNlLWl0ZW0gbWItNSI+CiAgPGRpdiBjbGFzcz0ic2VydmljZS1uYW1lIG1iLTIiPgogICAgPGltZyBjbGFzcz0iIiBzcmM9Ii4uL2Fzc2V0cy9pbWcvc3R1ZGllc2ZvcnRoZW1hdHVyYS5zdmciIGFsdD0iU3R1ZGllcyBmb3IgdGhlIG1hdHVyYSI+CjxzcGFuIGNsYXNzPSIiID5TdHVkaWVzIGZvciB0aGUgbWF0dXJhPC9zcGFuPgogIDwvZGl2PgogIDxkaXYgY2xhc3M9InNlcnZpY2UtZGVzYyBtYi02Ij4KRm9yIHRob3NlIGFscmVhZHkgaGF2aW5nIGEgdm9jYXRpb25hbCBxdWFsaWZpY2F0aW9uIGJ1dCBsYWNraW5nIGEgbWF0dXJhIG9yIGhhdmluZyBhIHNlY29uZGFyeSBsZXZlbCBlZHVjYXRpb24gd2l0aG91dCB0aGUgbWF0dXJhLCBwcmVwYXJhdGlvbiB0cmFpbmluZ3MgZm9yIG1hdHJpY3VsYXRpb24gZXhhbXMgYXJlIG9yZ2FuaXplZCByZWd1bGFybHksIHNwZWNpZmljYWxseSBmb3IgYWR1bHRzLiBUaGUgbGVuZ2h0IG9mIHRoZSB0cmFpbmluZyBpcyB1c3VhbGx5IDIgeWVhcnMuPC9kaXY+CjwvZGl2PgoKPGRpdiBjbGFzcz0ic2VydmljZS1pdGVtIG1iLTUiPgogIDxkaXYgY2xhc3M9InNlcnZpY2UtbmFtZSBtYi0yIj4KICAgIDxpbWcgY2xhc3M9IiIgc3JjPSIuLi9hc3NldHMvaW1nL2FkdmFuY2VkLWxldmVsLXZvY2F0aW9uYWwuc3ZnIiBhbHQ9IlN0dWRpZXMgZm9yIHRoZSBtYXR1cmEiPgo8c3BhbiBjbGFzcz0iIiA+QWR2YW5jZWQtbGV2ZWwgdm9jYXRpb25hbCB0cmFpbmluZzwvc3Bhbj4KICA8L2Rpdj4KICA8ZGl2IGNsYXNzPSJzZXJ2aWNlLWRlc2MgbWItNiI+CkFkdmFuY2VkLWxldmVsIHZvY2F0aW9uIHRyYWluaW5ncyBhcmUgdXN1YWxseSBvcmdhbml6ZWQgYnkgdW5pdmVyc2l0aWVzLiBUaGUgdHdvLXllYXIgcHJvZ3JhbXMgY2FuIGJlIGNvbXBsZXRlZCBhZnRlciBzZWNvbmRhcnkgc2Nob29sIGFuZCBjYW4gYmUgY29udGludWVkIG9uIHRlcnRpYXJ5IGxldmVsIGFzIHdlbGwuIFRoZXJlIGlzIGEgd2lkZSByYW5nZSBvZiBmaWVsZHMgdGF1Z2h0IGZyb20gZmluYW5jZSB0byBlbmdpbmVlcmluZy48L2Rpdj4KPC9kaXY+Cgo8ZGl2IGNsYXNzPSJzZXJ2aWNlLWl0ZW0gbWItNSI+CiAgPGRpdiBjbGFzcz0ic2VydmljZS1uYW1lIG1iLTIiPgogICAgPGltZyBjbGFzcz0iIiBzcmM9Ii4uL2Fzc2V0cy9pbWcvbGFuZ3VhZ2UtY291cnNlLnN2ZyIgYWx0PSJMYW5ndWFnZSBjb3Vyc2UiPgo8c3BhbiBjbGFzcz0iIiA+TGFuZ3VhZ2UgY291cnNlPC9zcGFuPgogIDwvZGl2PgogIDxkaXYgY2xhc3M9InNlcnZpY2UtZGVzYyBtYi02Ij4KV2Ugb3JnYW5pemUgbGFuZ3VhZ2UgdHJhaW5pbmdzIGZvciBvdXIgYmVuZWZpY2lhcmllcyBpbiBFbmdsaXNoLCBHZXJtYW4sIFNwYW5pc2ggYW5kIG90aGVyIHdvcmxkIGxhbmd1YWdlcy4gRm9yZWlnbiBsYW5ndWFnZSBwcm9maWNpZW5jeSBjYW4gc2lnbmlmaWNhbnRseSBpbmNyZWFzZSB5b3VyIGNoYW5jZXMgaW4gdGhlIGxhYm9yIG1hcmtldC4gPC9kaXY+CjwvZGl2PgogIDwvZGl2PgogICAgPC9kaXY+CiAgPC9kaXY+Cjwvc2VjdGlvbj4KPHNlY3Rpb24gY2xhc3M9InRlc3RpbW9uaWFsIj4KICA8ZGl2IGNsYXNzPSJjb250YWluZXIiPgogICAgICA8aDEgY2xhc3M9ImlzLXNpemUtMyBoYXMtdGV4dC13ZWlnaHQtYm9sZCBoYXMtdGV4dC1jZW50ZXJlZAltYi02Ij5UZXN0aW1vbmlhbHM8L2gxPgogICAgICA8ZGl2IGNsYXNzPSJ0ZXN0aW1vbmlhbC1pdGVtcyBjb2x1bW5zIj4KCgogICAgICAgIDxkaXYgY2xhc3M9InRlc3RpbW9uaWFsLWl0ZW0gY29sdW1uIGlzLWhhbGYiPgogICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZCI+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0iY2FyZC1jb250ZW50Ij4KICAgICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9Ii4uL2Fzc2V0cy9pbWcvcXUuc3ZnIgogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iVGVzdGltb25pYWwgaWNvbiIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJ0aXRsZSBtdC01Ij4KICAgIFNIQVBZUiBwcm92aWRlcyByZWd1bGFyIHRyYWluaW5ncywgd2hpY2ggSSB0aGluayBpcyB2ZXJ5IGltcG9ydGFudC4KICAgIDwvcD4KICAgICA8cCBjbGFzcz0ic3VidGl0bGUiPgogICAgICBJIHdpbGwgYmUgMjAgeWVhcnMgb2xkIGFuZCBJIGFtIGN1cnJlbnRseSBhIHN0dWRlbnQgb2YgdGhlIEdhbnogw4FicmFow6FtIEJpbGluZ3VhbCBTZWNvbmRhcnkgVm9jYXRpb25hbCBTY2hvb2wuCiAgICA8L3A+CiAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVkaWEgbGV2ZWxzIGlzLXZjZW50ZXJlZCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJsZXZlbCI+CiAgICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYS1sZWZ0Ij4KICAgICAgICAgICAgICAgICAgPGZpZ3VyZSBjbGFzcz0iaW1hZ2UgaXMtNDh4NDgiPgogICAgICAgICAgICAgICAgICAgIDxpbWcgc3JjPSIuLi9hc3NldHMvaW1nL3Rlc3QtaW1hZ2UucG5nIiBhbHQ9IlBsYWNlaG9sZGVyIGltYWdlIj4KICAgICAgICAgICAgICAgICAgPC9maWd1cmU+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICA8cCBjbGFzcz0ibmFtZSBpcy00Ij5Pc3prw6FyIEJhbG9naDwvcD4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICA8L2Rpdj4KICA8L2Rpdj4KPC9kaXY+CiAgICAgICAgPC9kaXY+CgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0idGVzdGltb25pYWwtaXRlbSBjb2x1bW4gaXMtaGFsZiI+CiAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkIj4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJjYXJkLWNvbnRlbnQiPgogICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iLi4vYXNzZXRzL2ltZy9xdS5zdmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJUZXN0aW1vbmlhbCBpY29uIgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgICAgICAgICAgICAgPHAgY2xhc3M9InRpdGxlIG10LTUiPgogICAgU0hBUFlSIHByb3ZpZGVzIHJlZ3VsYXIgdHJhaW5pbmdzLCB3aGljaCBJIHRoaW5rIGlzIHZlcnkgaW1wb3J0YW50LgogICAgPC9wPgogICAgIDxwIGNsYXNzPSJzdWJ0aXRsZSI+CiAgICAgIEkgd2lsbCBiZSAyMCB5ZWFycyBvbGQgYW5kIEkgYW0gY3VycmVudGx5IGEgc3R1ZGVudCBvZiB0aGUgR2FueiDDgWJyYWjDoW0gQmlsaW5ndWFsIFNlY29uZGFyeSBWb2NhdGlvbmFsIFNjaG9vbC4KICAgIDwvcD4KICAgICAgICAgICAgICA8ZGl2IGNsYXNzPSJtZWRpYSBsZXZlbHMgaXMtdmNlbnRlcmVkIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9ImxldmVsIj4KICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9Im1lZGlhLWxlZnQiPgogICAgICAgICAgICAgICAgICA8ZmlndXJlIGNsYXNzPSJpbWFnZSBpcy00OHg0OCI+CiAgICAgICAgICAgICAgICAgICAgPGltZyBzcmM9Ii4uL2Fzc2V0cy9pbWcvdGVzdC1pbWFnZS5wbmciIGFsdD0iUGxhY2Vob2xkZXIgaW1hZ2UiPgogICAgICAgICAgICAgICAgICA8L2ZpZ3VyZT4KICAgICAgICAgICAgICAgIDwvZGl2PgogICAgICAgICAgICAgICAgPGRpdiBjbGFzcz0ibWVkaWEtY29udGVudCI+CiAgICAgICAgICAgICAgICAgIDxwIGNsYXNzPSJuYW1lIGlzLTQiPk9zemvDoXIgQmFsb2doPC9wPgogICAgICAgICAgICAgICAgPC9kaXY+CiAgICAgICAgICAgICAgICA8L2Rpdj4KICAgIDwvZGl2PgogIDwvZGl2Pgo8L2Rpdj4KICAgICAgICA8L2Rpdj4KICAgICAgPC9kaXY+CiAgPC9kaXY+Cjwvc2VjdGlvbj4KPHNlY3Rpb24gY2xhc3M9InByZWZvb3RlciI+CiAgPGRpdiBjbGFzcz0iY29udGFpbmVyIj4KPGRpdiBjbGFzcz0iY29sdW1ucyI+CiAgPGRpdiBjbGFzcz0iY29sdW1uIGlzLTQiPgogICAgPGgzIGNsYXNzPSJpcy1zaXplLTUgaGFzLXRleHQtd2VpZ2h0LWJvbGQiPlZpc2l0IHVzIGF0PC9oMz4KICAgIDxwPjExMzkgQnVkYXBlc3QsIFbDoWNpIMO6dCA5OS48L3A+CiAgICA8YSBocmVmPSJodHRwczovL3d3dy5nb29nbGUuY29tL21hcHMvZGlyLy9CdWRhcGVzdCwrViVDMyVBMWNpKyVDMyVCQXQrOTksKzExMzkvQDQ3LjU0MDEyOTQsMTkuMDY4MjEyMSwxN3ovZGF0YT0hNG04ITRtNyExbTAhMW01ITFtMSExczB4NDc0MWRiYzNiZjFhZDg0ZjoweGI4MmExNzNjNGIyZjA0OWUhMm0yITFkMTkuMDcwNDAwOCEyZDQ3LjU0MDEyOTQiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9Ii4uL2Fzc2V0cy9pbWcvbmF2aWdhdGlvbi5zdmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJEaXJlY3Rpb24iCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5EaXJlY3Rpb25zPC9zcGFuPgogICAgICA8L2E+CiAgPC9kaXY+CiAgICA8ZGl2IGNsYXNzPSJjb2x1bW4gaXMtNCI+CiAgICAgICAgPGgzIGNsYXNzPSJpcy1zaXplLTUgaGFzLXRleHQtd2VpZ2h0LWJvbGQiPkNvbnRhY3QgdXM8L2gzPgogICAgICAgIDxwPlNob3VsZCB5b3UgaGF2ZSBhbnkgcXVlc3Rpb25zLCAKZmVlbCBmcmVlIHRvIGNvbnRhY3QgdXM8L3A+CiAgICA8YSBocmVmPSIiPgogICAgICAgICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9Ii4uL2Fzc2V0cy9pbWcvbWVzc2VuZ2VyLnN2ZyIKICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IlNlbmQgbWVzc2FnZSIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICAgICAgICAgICAgICAgIDxzcGFuPlNlbmQgbWVzc2FnZTwvc3Bhbj4KICAgICAgPC9hPgogICAgICAgICAgPGEgaHJlZj0idGVsOjA2MzA3OTI2NDUwIj4KICAgICAgICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSIuLi9hc3NldHMvaW1nL3RlbC5zdmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJUZWxlcGhvbmUiCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj4wNiAzMCA3OTIgNjQgNTA8L3NwYW4+CiAgICAgIDwvYT4KICAgICAgICAgICAgICAgIDxhIGhyZWY9Im1haWx0bzppbmZvQHJvbWFlZHVjYXRpb25mdW5kLm9yZyIgc3ViamVjdD0iRW1weXIgLSBJbmZvcm1hdGlvbiI+CiAgICAgICAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iLi4vYXNzZXRzL2ltZy9lbWFpbC5zdmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJFLW1haWwiCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgICAgICAgICAgICAgICA8c3Bhbj5pbmZvQHJvbWFlZHVjYXRpb25mdW5kLm9yZzwvc3Bhbj4KICAgICAgPC9hPgogIDwvZGl2PgogICAgPGRpdiBjbGFzcz0iY29sdW1uIGlzLTQiPgogICAgICAgIDxoMyBjbGFzcz0iaXMtc2l6ZS01IGhhcy10ZXh0LXdlaWdodC1ib2xkIj5XZSBhcmUgbWFkZSBwb3NzaWJsZSBieTwvaDM+CiAgICAgICAgICAgICAgICAgICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LnJvbWFlZHVjYXRpb25mdW5kLm9yZy8iIGNsYXNzPSJtci01Ij4KICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSIuLi9hc3NldHMvaW1nL3JvbWFlZHVjYXRpb25mdW5kLnBuZyIKICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IlJvbWEgRWR1Y2F0aW9uIEZ1bmQiCiAgICAgICAgICAgICAgICAgICAgICA+CiAgICAgICAgPC9hPgogICAgICAgICAgICAgICAgPGEgaHJlZj0iaHR0cHM6Ly92ZWx1eGZvdW5kYXRpb25zLmRrL2VuIiBjbGFzcz0ibXItNSI+CiAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iLi4vYXNzZXRzL2ltZy92ZWx1eC5wbmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJWZWx1eCIKICAgICAgICAgICAgICAgICAgICAgID4KICAgICAgICA8L2E+CiAgPC9kaXY+CjwvZGl2PgogIDwvZGl2Pgo8L3NlY3Rpb24+CjxzZWN0aW9uIGNsYXNzPSJmb290ZXIgaGFzLXRleHQtY2VudGVyZWQiPgogIDxkaXYgY2xhc3M9ImNvbnRhaW5lciI+CiAgICA8aDMgY2xhc3M9Im1iLTUiPkNvbm5lY3Qgd2l0aCB1czwvaDM+CiAgICA8ZGl2IGNsYXNzPSJzb2NpYWwiPgogICAgICAgIDxhIGhyZWY9Imh0dHBzOi8vd3d3LmZhY2Vib29rLmNvbS9Sb21hRWR1Y2F0aW9uRnVuZC8iIGNsYXNzPSJtci01Ij4KICAgICAgICAgICAgICAgICAgICA8aW1nCiAgICAgICAgICAgICAgICAgICAgICAgICAgc3JjPSIuLi9hc3NldHMvaW1nL2ZiLnN2ZyIKICAgICAgICAgICAgICAgICAgICAgICAgICBhbHQ9IkZhY2Vib29rIgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3R3aXR0ZXIuY29tL3JvbWFlZHVjYXRpb24iPgogICAgICAgICAgICAgICAgICAgIDxpbWcKICAgICAgICAgICAgICAgICAgICAgICAgICBzcmM9Ii4uL2Fzc2V0cy9pbWcvdHdpdHRlci5zdmciCiAgICAgICAgICAgICAgICAgICAgICAgICAgYWx0PSJUd2l0dGVyIgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgIDwvYT4KICAgICAgICA8YSBocmVmPSJodHRwczovL3d3dy5pbnN0YWdyYW0uY29tL3JvbWFfZWR1Y2F0aW9uX2Z1bmQvIiBjbGFzcz0ibWwtNSI+CiAgICAgICAgICAgICAgICAgICAgPGltZwogICAgICAgICAgICAgICAgICAgICAgICAgIHNyYz0iLi4vYXNzZXRzL2ltZy9pbnN0YWdyYW0uc3ZnIgogICAgICAgICAgICAgICAgICAgICAgICAgIGFsdD0iSW5zdGFncmFtIgogICAgICAgICAgICAgICAgICAgICAgPgogICAgICAgIDwvYT4KICAgIDwvZGl2PgogICAgPGhyPgogICAgPGEgQGNsaWNrPSJhbGVydFByaXZhY3kiPlByaXZhY3kgUG9saWN5PC9hPgogIDwvZGl2Pgo8L3NlY3Rpb24+CjwvZGl2Pgo="},null]}